# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   annotations:
#     autopilot.gke.io/resource-adjustment: >-
#       {"input":{"containers":[{"name":"express-backend-sha256-1"}]},"output":{"containers":[{"limits":{"cpu":"500m","ephemeral-storage":"1Gi","memory":"2Gi"},"requests":{"cpu":"500m","ephemeral-storage":"1Gi","memory":"2Gi"},"name":"express-backend-sha256-1"}]},"modified":true}
#     autopilot.gke.io/warden-version: 2.7.41
#   labels:
#     app: express-db-persistent
#   managedFields:
#     - apiVersion: apps/v1
#       fieldsType: FieldsV1
#       fieldsV1:
#         'f:spec':
#           'f:replicas': {}
#       manager: vpa-recommender
#       operation: Update
#       subresource: scale
#     - apiVersion: apps/v1
#       fieldsType: FieldsV1
#       fieldsV1:
#         'f:metadata':
#           'f:labels':
#             .: {}
#             'f:app': {}
#         'f:spec':
#           'f:progressDeadlineSeconds': {}
#           'f:revisionHistoryLimit': {}
#           'f:selector': {}
#           'f:strategy':
#             'f:rollingUpdate':
#               .: {}
#               'f:maxSurge': {}
#               'f:maxUnavailable': {}
#             'f:type': {}
#           'f:template':
#             'f:metadata':
#               'f:labels':
#                 .: {}
#                 'f:app': {}
#             'f:spec':
#               'f:containers':
#                 'k:{"name":"express-backend-sha256-1"}':
#                   .: {}
#                   'f:image': {}
#                   'f:imagePullPolicy': {}
#                   'f:name': {}
#                   'f:resources': {}
#                   'f:terminationMessagePath': {}
#                   'f:terminationMessagePolicy': {}
#               'f:dnsPolicy': {}
#               'f:restartPolicy': {}
#               'f:schedulerName': {}
#               'f:securityContext': {}
#               'f:terminationGracePeriodSeconds': {}
#       manager: GoogleCloudConsole
#       operation: Update
#       time: '2024-01-21T14:55:10Z'
#     - apiVersion: apps/v1
#       fieldsType: FieldsV1
#       fieldsV1:
#         'f:metadata':
#           'f:annotations':
#             'f:deployment.kubernetes.io/revision': {}
#         'f:status':
#           'f:availableReplicas': {}
#           'f:conditions':
#             .: {}
#             'k:{"type":"Available"}':
#               .: {}
#               'f:lastTransitionTime': {}
#               'f:lastUpdateTime': {}
#               'f:message': {}
#               'f:reason': {}
#               'f:status': {}
#               'f:type': {}
#             'k:{"type":"Progressing"}':
#               .: {}
#               'f:lastTransitionTime': {}
#               'f:lastUpdateTime': {}
#               'f:message': {}
#               'f:reason': {}
#               'f:status': {}
#               'f:type': {}
#           'f:observedGeneration': {}
#           'f:readyReplicas': {}
#           'f:replicas': {}
#           'f:updatedReplicas': {}
#       manager: kube-controller-manager
#       operation: Update
#       subresource: status
#       time: '2024-01-22T15:33:46Z'
#   name: express-db-persistent
#   namespace: default
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: express-db-persistent
#   strategy:
#     rollingUpdate:
#       maxSurge: 25%
#       maxUnavailable: 25%
#     type: RollingUpdate
#   template:
#     metadata:
#       labels:
#         app: express-db-persistent
#     spec:
#       containers:
#         - image: >-
#             gcr.io/cruzhacks2024-411821/github.com/cruzhacks-2024/express-backend
#           imagePullPolicy: IfNotPresent
#           name: express-backend-sha256-1
#           resources:
#             limits:
#               cpu: 500m
#               ephemeral-storage: 1Gi
#               memory: 2Gi
#             requests:
#               cpu: 500m
#               ephemeral-storage: 1Gi
#               memory: 2Gi
#           securityContext:
#             capabilities:
#               drop:
#                 - NET_RAW
#       securityContext:
#         seccompProfile:
#           type: RuntimeDefault
#       tolerations:
#         - effect: NoSchedule
#           key: kubernetes.io/arch
#           operator: Equal
#           value: amd64

# Reference: https://devopscube.com/persistent-volume-google-kubernetes-engine/
# A Pod is a worker in Kubernetes
# Multiple Pods can run on a single Node: Container(s) -> Pod(s) -> Deployment

# `containers -> volumeMounts` specifies where the volume/perisistent disk "app" as declared above should be mounted in the container
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.29/#volumemount-v1-core

apiVersion: v1
kind: Pod
metadata:
  name: express-db-pod
  labels:
    app: express-db-persistent
spec:
  volumes:
    - name: app
      # configMap: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.29/#configmapvolumesource-v1-core
      # configMap:
      #   optional: true
      #   name: files-map
      #   items:
      #     - key: app
      #       path: /app
      persistentVolumeClaim:
        claimName: database-storage
  containers:
    - name: express-backend-sha256-1
      image: gcr.io/cruzhacks2024-411821/github.com/cruzhacks-2024/express-backend
      ports:
        - containerPort: 3000
          name: "database-server"
      volumeMounts:
        - mountPath: "/app"
          name: app
# ---
# apiVersion: autoscaling/v2
# kind: HorizontalPodAutoscaler
# metadata:
#   labels:
#     app: express-db-persistent
#   managedFields:
#     - apiVersion: autoscaling/v2
#       fieldsType: FieldsV1
#       fieldsV1:
#         'f:metadata':
#           'f:labels':
#             .: {}
#             'f:app': {}
#         'f:spec':
#           'f:maxReplicas': {}
#           'f:metrics': {}
#           'f:minReplicas': {}
#           'f:scaleTargetRef':
#             'f:apiVersion': {}
#             'f:kind': {}
#             'f:name': {}
#       manager: GoogleCloudConsole
#       operation: Update
#       time: '2024-01-21T14:55:10Z'
#     - apiVersion: autoscaling/v2
#       fieldsType: FieldsV1
#       fieldsV1:
#         'f:status':
#           'f:conditions':
#             .: {}
#             'k:{"type":"AbleToScale"}':
#               .: {}
#               'f:lastTransitionTime': {}
#               'f:message': {}
#               'f:reason': {}
#               'f:status': {}
#               'f:type': {}
#             'k:{"type":"ScalingActive"}':
#               .: {}
#               'f:lastTransitionTime': {}
#               'f:message': {}
#               'f:reason': {}
#               'f:status': {}
#               'f:type': {}
#             'k:{"type":"ScalingLimited"}':
#               .: {}
#               'f:lastTransitionTime': {}
#               'f:message': {}
#               'f:reason': {}
#               'f:status': {}
#               'f:type': {}
#           'f:currentMetrics': {}
#           'f:currentReplicas': {}
#           'f:desiredReplicas': {}
#           'f:lastScaleTime': {}
#       manager: vpa-recommender
#       operation: Update
#       subresource: status
#       time: '2024-01-23T01:31:12Z'
#   name: express-db-persistent-hpa-gbou
#   namespace: default
# spec:
#   maxReplicas: 5
#   metrics:
#     - resource:
#         name: cpu
#         target:
#           averageUtilization: 80
#           type: Utilization
#       type: Resource
#   minReplicas: 1
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: express-db-persistent
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/neg: '{"ingress":true}'
  finalizers:
    - service.kubernetes.io/load-balancer-cleanup
  labels:
    app: express-db-persistent
  managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:labels':
            .: {}
            'f:app': {}
        'f:spec':
          'f:allocateLoadBalancerNodePorts': {}
          'f:externalTrafficPolicy': {}
          'f:internalTrafficPolicy': {}
          'f:ports':
            .: {}
            'k:{"port":3000,"protocol":"TCP"}':
              .: {}
              'f:port': {}
              'f:protocol': {}
              'f:targetPort': {}
          'f:selector': {}
          'f:sessionAffinity': {}
          'f:type': {}
      manager: GoogleCloudConsole
      operation: Update
      time: '2024-01-21T14:56:14Z'
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:finalizers':
            .: {}
            'v:"service.kubernetes.io/load-balancer-cleanup"': {}
        'f:status':
          'f:loadBalancer':
            'f:ingress': {}
      manager: cloud-controller-manager
      operation: Update
      subresource: status
      time: '2024-01-21T14:56:57Z'
  name: express-db-persistent-service
  namespace: default
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 34.118.229.194
  clusterIPs:
    - 34.118.229.194
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - nodePort: 31420
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: express-db-persistent
  sessionAffinity: None
  type: LoadBalancer